student_num <- 1
for(path in paths ){
tmp_full_path <- paste(dir,path, sep = "")
source(tmp_full_path)
lr <- ListReporter$new()
test_file("~/gradeR/my_tests/grade_hw1.R", reporter = lr)
# parse the output
for(q in (1:number_questions))
score_data[student_num, q] <- lr$get_results()[[2]]$results
rm(list=setdiff(ls(), c("path", "paths", "dir", "student_num")))
student_num <- student_num + 1
}
library(testthat)
dir <- "~/gradeR/assignment1_submissions/"
paths <- list.files(path = dir, recursive = T)
# TODO: get number of questions
number_questions <- 2
number_students <- 2
score_data <- data.frame("id" = vector(mode = "character", length = 2),
matrix(data = "blank", nrow = number_students, ncol = number_questions))
student_num <- 1
for(path in paths ){
tmp_full_path <- paste(dir,path, sep = "")
source(tmp_full_path)
lr <- ListReporter$new()
test_file("~/gradeR/my_tests/grade_hw1.R", reporter = lr)
# parse the output
for(q in (1:number_questions))
score_data[student_num, q] <- lr$get_results()[[2]]$results
rm(list=setdiff(ls(), c("path", "paths", "dir", "student_num", "number_questions", "number_students", "score_data")))
student_num <- student_num + 1
}
library(testthat)
dir <- "~/gradeR/assignment1_submissions/"
paths <- list.files(path = dir, recursive = T)
# TODO: get number of questions
number_questions <- 2
number_students <- 2
score_data <- data.frame("id" = vector(mode = "character", length = 2),
matrix(data = "blank", nrow = number_students, ncol = number_questions))
student_num <- 1
path <- paths[1]
tmp_full_path <- paste(dir,path, sep = "")
source(tmp_full_path)
lr <- ListReporter$new()
test_file("~/gradeR/my_tests/grade_hw1.R", reporter = lr)
# parse the output
for(q in (1:number_questions))
cat(lr$get_results()[[2]]$results)
lr$get_results()[[q]]$results
lr$get_results()[[q]]$results[[1]]
# parse the output
for(q in (1:number_questions))
score_data[student_num, q] <- lr$get_results()[[q]]$results[[1]]
lr$get_results()[[1]]$results[[1]]
lr$get_results()[[2]]$results[[1]]
class(lr$get_results()[[2]]$results[[1]])
as.character(lr$get_results()[[2]]$results[[1]])
class(lr$get_results()[[2]]$results[[1]])
lr$get_results()[[2]]$results[[1]]
class(lr$get_results()[[2]]$results[[1]])
lr$get_results()[[2]]$results[[1]]
names(lr$get_results()[[2]]$results[[1]])
lr$get_results()[[2]]$results[[1]]$message
lr$get_results()[[2]]$results[[1]]$test
lr$get_results()[[2]]$results[[1]]$srcref
lr$get_results()[[2]]$results[[1]]$test
lr$get_results()[[2]]$results[[1]]$call
lr$get_results()[[2]]$results[[1]]
lr$get_results()[[2]]$results[[1]]
lr$get_results()[[2]]$results[[1]]$start_frame
names(lr$get_results()[[2]])
lr$get_results()[[2]]$results
names(lr$get_results()[[2]]$results)
names(lr$get_results()[[2]]$results[[1]])
lr$get_results()
source("~/gradeR/reporter-grading.R")
test_file()
?test_file()
paths <- list.files(path = dir, recursive = T)
# TODO: get number of questions
number_questions <- 2
number_students <- 2
score_data <- data.frame("id" = vector(mode = "character", length = 2),
matrix(data = "blank", nrow = number_students, ncol = number_questions))
student_num <- 1
path <- paths[1]
dir <- "~/gradeR/assignment1_submissions/"
paths <- list.files(path = dir, recursive = T)
# TODO: get number of questions
number_questions <- 2
number_students <- 2
score_data <- data.frame("id" = vector(mode = "character", length = 2),
matrix(data = "blank", nrow = number_students, ncol = number_questions))
student_num <- 1
path <- paths[1]
tmp_full_path <- paste(dir,path, sep = "")
source(tmp_full_path)
#lr <- ListReporter$new()
test_file("~/gradeR/my_tests/grade_hw1.R", reporter = GradingReporter$new()) # $reporter = lr)
?Stack
??Stack
#source("~/gradeR/reporter-grading.R")
dir <- "~/gradeR/assignment1_submissions/"
paths <- list.files(path = dir, recursive = T)
# TODO: get number of questions
number_questions <- 2
number_students <- 2
score_data <- data.frame("id" = vector(mode = "character", length = 2),
matrix(data = "blank", nrow = number_students, ncol = number_questions))
student_num <- 1
path <- paths[1]
tmp_full_path <- paste(dir,path, sep = "")
source(tmp_full_path)
#lr <- ListReporter$new()
out <- test_file("~/gradeR/my_tests/grade_hw1.R", reporter = "minimal") # $reporter = lr)
str(out[[1]])
out[[1]]$results
str(out[[1]]$results)
out[[1]]$results$test
out[[1]]$results[[7]]
names(out[[1]]$results)
length(out[[1]]$results)
length(out[[1]]$results[[1]])
length(out[[1]]$results[[1]])
names(out[[1]]$results[[1]])
out[[1]]$results[[1]]$test
str(out[[1]]$results[[1]]$test)
class(out[[1]]$results[[1]]$test)
length(out[[1]]$results[[1]]$test)
length(out[[1]]$results[[1]][[7]])
names(out[[1]]$results[[1]][[7]])
class(out[[1]]$results[[1]][[7]])
(out[[1]]$results[[1]]$test)
str(out[[1]]$results)
str(out[[1]]$results[[1]])
str(out[[1]]$results[[1]]$expectation_calls)
str(out[[1]]$results[[1]]$expectation_calls[[1]])
(out[[1]]$results[[1]]$expectation_calls[[1]])
str(out[[1]]$results[[1]])
out[[1]]
#lr <- ListReporter$new()
out <- test_file("~/gradeR/my_tests/grade_hw1.R", reporter = SilentReporter$new())#"minimal") # $reporter = lr)
str(out)
str(out[[1]])
lr <- ListReporter$new()
out <- test_file("~/gradeR/my_tests/grade_hw1.R", reporter = lr)#SilentReporter$new())#"minimal") # $reporter = lr)
lr$get_results()
lr$expectations()
str(lr)
lr$results()
lr$results
str(lr$results)
lr$results()
lr$results
class(lr$results)
lr$results$as_list()
str(lr$results$as_list())
lr$results$as_list()
lr$results$as_list()[[2]]
lr$results$as_list()[[2]]$results
lr$results$as_list()[[2]]$results[[1]]
str(lr$results$as_list()[[2]]$results[[1]])
str(lr$results$as_list()[[2]]$results[[1]]$test)
attributes(lr$results$as_list()[[2]]$results[[1]]$test)
attributes(lr$results$as_list()[[2]]$results[[1]])
attributes(lr$results$as_list()[[2]]$results[[1]]$test)
attributes(lr$results$as_list()[[2]]$results[[1]]$class)
lr$results$as_list()[[2]]$results[[1]]$class
lr$results$as_list()[[2]]$results[[1]]
class(lr$results$as_list()[[2]]$results[[1]])
is(lr$results$as_list()[[2]]$results[[1]],"expectation_success")
#source("~/gradeR/reporter-grading.R")
dir <- "~/gradeR/assignment1_submissions/"
paths <- list.files(path = dir, recursive = T)
# TODO: get number of questions
number_questions <- 2
number_students <- 2
score_data <- data.frame("id" = vector(mode = "character", length = 2),
matrix(data = "blank", nrow = number_students, ncol = number_questions))
student_num <- 1
path <- paths[1]
tmp_full_path <- paste(dir,path, sep = "")
source(tmp_full_path)
lr <- ListReporter$new()
out <- test_file("~/gradeR/my_tests/grade_hw1.R", reporter = lr)#SilentReporter$new())#"minimal") # $reporter = lr)
# parse the output
for(q in (1:number_questions))
is(lr$results$as_list()[[2]]$results[[1]],"expectation_success")
q <- 1
lr$results$as_list()
length(lr$results$as_list())
is(lr$results$as_list()[[q]]$results[[1]],"expectation_success")
is(lr$results$as_list()[[q]]$results[[2]],"expectation_success")
is(lr$results$as_list()[[q]]$results[[1]],"expectation_success")
q <- 2
is(lr$results$as_list()[[q]]$results[[1]],"expectation_success")
#source("~/gradeR/reporter-grading.R")
dir <- "~/gradeR/assignment1_submissions/"
paths <- list.files(path = dir, recursive = T)
# TODO: get number of questions
number_questions <- 2
number_students <- 2
score_data <- data.frame("id" = vector(mode = "character", length = 2),
matrix(data = "blank", nrow = number_students, ncol = number_questions))
student_num <- 1
for(path in paths ){
tmp_full_path <- paste(dir,path, sep = "")
source(tmp_full_path)
lr <- ListReporter$new()
out <- test_file("~/gradeR/my_tests/grade_hw1.R", reporter = lr)#SilentReporter$new())#"minimal") # $reporter = lr)
# parse the output
for(q in (1:number_questions)){
success <- is(lr$results$as_list()[[q]]$results[[1]],"expectation_success")
if(success)
score_data[student_num, q] <- "yay"
else
score_data[student_num, q] <- "no"
}
rm(list=setdiff(ls(),
c("path", "paths", "dir", "student_num", "number_questions", "number_students", "score_data")))
student_num <- student_num + 1
}
paths
path
tmp_full_path <- paste(dir,path, sep = "")
source(tmp_full_path)
lr <- ListReporter$new()
out <- test_file("~/gradeR/my_tests/grade_hw1.R", reporter = lr)#SilentReporter$new())#"minimal") # $reporter = lr)
# parse the output
for(q in (1:number_questions)){
success <- is(lr$results$as_list()[[q]]$results[[1]],"expectation_success")
if(success)
score_data[student_num, q] <- "yay"
else
score_data[student_num, q] <- "no"
}
q <- 1
success <- is(lr$results$as_list()[[q]]$results[[1]],"expectation_success")
success
if(success)
score_data[student_num, q] <- "yay"
else
# parse the output
for(q in (1:number_questions)){
success <- is(lr$results$as_list()[[q]]$results[[1]],"expectation_success")
if(success){
score_data[student_num, q] <- "yay"
}else{
score_data[student_num, q] <- "no"
}
}
if(success){
score_data[student_num, q] <- "yay"
}else{
score_data[student_num, q] <- "no"
}
score_data[student_num, q]
score_data
str(score_data)
score_data <- data.frame("id" = vector(mode = "character", length = 2),
matrix(data = "blank", nrow = number_students, ncol = number_questions))
str(score_data)
cbind(vector(mode = "character", length = 2),
matrix(data = "blank", nrow = number_students, ncol = number_questions))
score_data <- data.frame("id" = vector(mode = "character", length = 2),
matrix(data = "blank", nrow = number_students, ncol = number_questions))
library(testthat)
#source("~/gradeR/reporter-grading.R")
dir <- "~/gradeR/assignment1_submissions/"
paths <- list.files(path = dir, recursive = T)
# TODO: get number of questions
number_questions <- 2
number_students <- 2
score_data <- data.frame("id" = vector(mode = "character", length = 2),
matrix(data = "blank", nrow = number_students, ncol = number_questions))
student_num <- 1
for(path in paths ){
tmp_full_path <- paste(dir,path, sep = "")
source(tmp_full_path)
lr <- ListReporter$new()
out <- test_file("~/gradeR/my_tests/grade_hw1.R", reporter = lr)#SilentReporter$new())#"minimal") # $reporter = lr)
# parse the output
for(q in (1:number_questions)){
success <- is(lr$results$as_list()[[q]]$results[[1]],"expectation_success")
if(success){
score_data[student_num, q] <- "yay"
}else{
score_data[student_num, q] <- "no"
}
}
rm(list=setdiff(ls(),
c("path", "paths", "dir", "student_num",
"number_questions", "number_students", "score_data")))
student_num <- student_num + 1
}
#source("~/gradeR/reporter-grading.R")
dir <- "~/gradeR/assignment1_submissions/"
paths <- list.files(path = dir, recursive = T)
# TODO: get number of questions
number_questions <- 2
number_students <- 2
score_data <- data.frame("id" = vector(mode = "character", length = 2),
matrix(data = "blank", nrow = number_students,
ncol = number_questions),
stringsAsFactors = F)
student_num <- 1
for(path in paths ){
tmp_full_path <- paste(dir,path, sep = "")
source(tmp_full_path)
lr <- ListReporter$new()
out <- test_file("~/gradeR/my_tests/grade_hw1.R", reporter = lr)#SilentReporter$new())#"minimal") # $reporter = lr)
# parse the output
for(q in (1:number_questions)){
success <- is(lr$results$as_list()[[q]]$results[[1]],"expectation_success")
if(success){
score_data[student_num, q] <- "yay"
}else{
score_data[student_num, q] <- "no"
}
}
rm(list=setdiff(ls(),
c("path", "paths", "dir", "student_num",
"number_questions", "number_students", "score_data")))
student_num <- student_num + 1
}
score_data
paths
library(testthat)
#source("~/gradeR/reporter-grading.R")
dir <- "~/gradeR/assignment1_submissions/"
paths <- list.files(path = dir, recursive = T)
# TODO: get number of questions
number_questions <- 2
number_students <- 2
score_data <- data.frame("id" = vector(mode = "character", length = 2),
matrix(data = "blank", nrow = number_students,
ncol = number_questions),
stringsAsFactors = F)
student_num <- 1
for(path in paths ){
tmp_full_path <- paste(dir,path, sep = "")
source(tmp_full_path)
lr <- ListReporter$new()
out <- test_file("~/gradeR/my_tests/grade_hw1.R", reporter = lr)#SilentReporter$new())#"minimal") # $reporter = lr)
# parse the output
for(q in (1:number_questions)){
success <- is(lr$results$as_list()[[q]]$results[[1]],"expectation_success")
if(success){
score_data[student_num, q+1] <- "yay"
}else{
score_data[student_num, q+1] <- "no"
}
}
rm(list=setdiff(ls(),
c("path", "paths", "dir", "student_num",
"number_questions", "number_students", "score_data")))
student_num <- student_num + 1
}
score_data
paste(dir,paths[1], sep = "")
test_file("~/gradeR/my_tests/grade_hw1.R")
length(test_file("~/gradeR/my_tests/grade_hw1.R"))
test_file("~/gradeR/my_tests/grade_hw1.R", reporter = "minimal")
length(test_file("~/gradeR/my_tests/grade_hw1.R", reporter = "minimal"))
test_file("~/gradeR/my_tests/grade_hw1.R", reporter = "minimal")[[1]]
length(paths)
source('~/gradeR/grade.r', echo=TRUE)
View(score_data)
source('~/gradeR/grade.r', echo=TRUE)
View(score_data)
library(testthat)
submission_dir <- "~/gradeR/assignment1_submissions/"
"~/gradeR/my_tests/grade_hw1.R"
paths <- list.files(path = submission_dir, recursive = T)
number_questions <- length(test_file(test_file, reporter = "minimal"))
number_students <- length(paths)
score_data <- data.frame("id" = vector(mode = "character", length = 2),
matrix(data = "blank", nrow = number_students,
ncol = number_questions),
stringsAsFactors = F)
student_num <- 1
library(testthat)
submission_dir <- "~/gradeR/assignment1_submissions/"
"~/gradeR/my_tests/grade_hw1.R"
paths <- list.files(path = submission_dir, recursive = T)
number_questions <- length(test_file(test_file, reporter = "minimal"))
library(testthat)
submission_dir <- "~/gradeR/assignment1_submissions/"
your_test_file <- "~/gradeR/my_tests/grade_hw1.R"
paths <- list.files(path = submission_dir, recursive = T)
number_questions <- length(test_file(your_test_file, reporter = "minimal"))
number_students <- length(paths)
score_data <- data.frame("id" = vector(mode = "character", length = 2),
matrix(data = "blank", nrow = number_students,
ncol = number_questions),
stringsAsFactors = F)
student_num <- 1
for(path in paths ){
tmp_full_path <- paste(submission_dir, path, sep = "")
source(tmp_full_path)
lr <- ListReporter$new()
out <- test_file("~/gradeR/my_tests/grade_hw1.R",
reporter = lr)
# parse the output
score_data[student_num,1] <- tmp_full_path
for(q in (1:number_questions)){
# true or false if question was correct
success <- is(lr$results$as_list()[[q]]$results[[1]],"expectation_success")
# TODO incorporate point values
if(success){
score_data[student_num, q+1] <- "1"
}else{
score_data[student_num, q+1] <- "0"
}
}
# clear out all of the student's data from global environment
rm(list=setdiff(ls(),
c("path", "paths", "submission_dir", "student_num",
"number_questions", "number_students", "score_data")))
# increment
student_num <- student_num + 1
}
View(score_data)
library(testthat)
submission_dir <- "~/gradeR/assignment1_submissions/"
your_test_file <- "~/gradeR/my_tests/grade_hw1.R"
gradeR <- function(submission_dir, your_test_file){
paths <- list.files(path = submission_dir, recursive = T)
number_questions <- length(test_file(your_test_file, reporter = "minimal"))
number_students <- length(paths)
score_data <- data.frame("id" = vector(mode = "character", length = 2),
matrix(data = "blank", nrow = number_students,
ncol = number_questions),
stringsAsFactors = F)
student_num <- 1
for(path in paths ){
tmp_full_path <- paste(submission_dir, path, sep = "")
source(tmp_full_path)
lr <- ListReporter$new()
out <- test_file("~/gradeR/my_tests/grade_hw1.R",
reporter = lr)
# parse the output
score_data[student_num,1] <- tmp_full_path
for(q in (1:number_questions)){
# true or false if question was correct
success <- is(lr$results$as_list()[[q]]$results[[1]],"expectation_success")
# TODO incorporate point values
if(success){
score_data[student_num, q+1] <- "1"
}else{
score_data[student_num, q+1] <- "0"
}
}
# clear out all of the student's data from global environment
rm(list=setdiff(ls(),
c("path", "paths", "submission_dir", "student_num",
"number_questions", "number_students", "score_data")))
# increment
student_num <- student_num + 1
}
return(score_data)
}
library(roxygen2)
install.packages("roxygen2")
install.packages("roxygen2", dependencies = T)
install.packages("roxygen2", dependencies = T)
library(roxygen2)
create("gradeR")
library(devtools)
create("gradeR")
setwd("~/")
create("gradeR")
setwd("gradeR")
document()
install_github("gradeR", "tbrown122387")
install_github("gradeR", "tbrown122387")
install_github("~/gradeR", "tbrown122387")
setwd("~")
getwd()
install_github("gradeR", "tbrown122387")
install_github("gradeR", "tbrown122387")
document()
setwd("gradeR/")
document()
install()
?gradeR
install()
document()
install()
?gradeR
document()
list.files(path = "~/gradeR/example/assignment1_submissions/", recursive = T)
list.files(path = "~/gradeR/example/assignment1_submissions/", recursive = T, pattern = ".r")
list.files(path = "~/gradeR/example/assignment1_submissions/", recursive = T, pattern = "*.r")
list.files(path = "~/gradeR/example/assignment1_submissions/", recursive = T,  pattern = "*{.r,.R}")
list.files(path = "~/gradeR/example/assignment1_submissions/", recursive = T,  pattern = "*[.r,.R]")
list.files(path = "~/gradeR/example/assignment1_submissions/", recursive = T,  pattern = "*[.r$,.R$]")
list.files(path = "~/gradeR/example/assignment1_submissions/", recursive = T,  pattern = "*[\\.r$,\\.R$]")
list.files(path = "~/gradeR/example/assignment1_submissions/", recursive = T,  pattern = "\\.r$", ignore.case = T)
document()
use_testthat()
getwd()
ay <- function(sup){length(sup))}
ay <- function(sup){ is.null(sup)}
ay()
gradeR()
gradeR("tests/testthat/assignment1_submissions/", "tests/testthat/grade_hw1.R")
gradeR("~/gradeR/example/assignment1_submissions/", "~/gradeR/example/grade_hw1.R")
install()
setwd("~/gradeR/")
install()
